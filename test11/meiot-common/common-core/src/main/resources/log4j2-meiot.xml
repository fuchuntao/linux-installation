<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration   debug = "false">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
    <!--变量配置-->
    <springProperty  scope="context" name="log" source="logging.path"/>
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
<!--        <Property name="FILE_PATH">${sys:LOG_PATH}</Property>-->

        <Property name="FILE_PATH">${sys:LOG_PATH}</Property>
<!--        <Property name="FILE_NAME">${sys:LOG_PATH}</Property>-->
        <property  name="LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss sss} [%thread] %-5level %logger{36} %L %M - %msg%xEx%n" />
        <!-- 定义日志存储的路径，不要配置相对路径 -->
    </Properties>

    <appenders>

        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
           <!-- <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>-->
        </console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${FILE_PATH}/info/info.log" filePattern="${FILE_PATH}/info/info-%d{yyyy-MM-dd}.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY" />
            <PatternLayout pattern="${LOG_PATTERN}" />
            <DefaultRolloverStrategy max = "2">
                <Delete basePath="${FILE_PATH}/info" maxDepth="1">
                    <IfAny>
                        <IfFileName glob="*/info-*.log" />
                       <!-- <IfLastModified age="48H" />-->
                        <IfAccumulatedFileCount exceeds="30" />
                    </IfAny>
                </Delete>
            </DefaultRolloverStrategy>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的warn及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileWarn" fileName="${FILE_PATH}/warn/warn.log" filePattern="${FILE_PATH}/warn/back/warn-%d{yyyy-MM-dd}.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <DefaultRolloverStrategy max = "2">
                <Delete basePath="${FILE_PATH}/warn" maxDepth="1">
                    <IfAny>
                        <IfFileName glob="*/warn-*.log" />
                        <!-- <IfLastModified age="48H" />-->
                        <IfAccumulatedFileCount exceeds="30" />
                    </IfAny>
                </Delete>
            </DefaultRolloverStrategy>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
        </RollingFile>

        <!-- 这个会打印出所有的error及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileError" fileName="${FILE_PATH}/error/error.log" filePattern="${FILE_PATH}/error/back/error--%d{yyyy-MM-dd}.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <DefaultRolloverStrategy max = "2">
                <Delete basePath="${FILE_PATH}/error" maxDepth="1">
                    <IfAny>
                        <IfFileName glob="*/error-*.log" />
                        <!-- <IfLastModified age="48H" />-->
                        <IfAccumulatedFileCount exceeds="30" />
                    </IfAny>
                </Delete>
            </DefaultRolloverStrategy>
            <Policies>
                <!--interval属性用来指定多久滚动一次，默认是1 hour-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
        </RollingFile>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
<!--        <File name="Filelog" fileName="${FILE_PATH}/info/info.log" append="false">-->
<!--            <PatternLayout pattern="${LOG_PATTERN}"/>-->
<!--        </File>-->

    </appenders>

    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>

        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!--监控系统信息-->
        <!--若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。-->
     <!--   <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>-->

        <logger name="com.apache.ibatis" level="TRACE" />
        <logger name="java.sql.Connection" level="DEBUG" />
        <logger name="java.sql.Statement" level="DEBUG" />
        <logger name="java.sql.PreparedStatement" level="DEBUG" />
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="Filelog"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>

</configuration>